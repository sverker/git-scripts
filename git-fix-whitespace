#!/bin/bash
usage(){
cat << EOF
git-fix-whitespace - Fixes the whitespace issues that 'git-diff --check' complains about.
Usage:
    $0 --all
Synopsis:
    Fix all whitespace errors on modified lines in both staged and working files
EOF
}

apply_fail(){
    echo "Failed to apply patch $PATCH"
    echo "ERROR = $1"
    exit $1
}

if [[ $# != 1 || "$1" != "--all" ]]; then
    usage
    exit
fi

EXCLUDE=--exclude=*.beam

PATCH_w_undo=$(mktemp ${0##*/}.patch.w.undo.XXXXXX)
PATCH_w_redo=$(mktemp ${0##*/}.patch.w.redo.XXXXXX)

git diff --no-ext-diff HEAD > $PATCH_w_undo
git diff --no-ext-diff --ignore-space-at-eol HEAD > $PATCH_w_redo

if git diff --check HEAD > /dev/null && diff -q $PATCH_w_undo $PATCH_w_redo > /dev/null; then
    echo "No whitespace errors in work dir"
else
    git apply -R $EXCLUDE $PATCH_w_undo || apply_fail 1
    git apply --ignore-whitespace --whitespace=fix $EXCLUDE $PATCH_w_redo || apply_fail 2
fi

PATCH_c_undo=$(mktemp ${0##*/}.patch.c.undo.XXXXXX)
PATCH_c_redo=$(mktemp ${0##*/}.patch.c.redo.XXXXXX)

git diff --no-ext-diff --cached HEAD > $PATCH_c_undo
git diff --no-ext-diff --cached --ignore-space-at-eol HEAD > $PATCH_c_redo

if git diff --check --cached HEAD > /dev/null && diff -q $PATCH_c_undo $PATCH_c_redo > /dev/null; then
    echo "No whitespace errors in staged files"
else
    git apply --cached -R $EXCLUDE $PATCH_c_undo || apply_fail 3
    git apply --cached --ignore-whitespace --whitespace=fix $EXCLUDE $PATCH_c_redo || apply_fail 4
fi

rm $PATCH_c_undo $PATCH_c_redo
rm $PATCH_w_undo $PATCH_w_redo
